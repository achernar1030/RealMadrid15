import numpy as np

def solve_polynomial(coefficients):
    """
    다항 방정식의 계수를 입력받아 모든 근을 찾습니다.
    예시: a_n*x^n + a_{n-1}*x^(n-1) + ... + a_1*x + a_0 = 0
    coefficients: [a_n, a_{n-1}, ..., a_1, a_0] 형태의 리스트 또는 넘파이 배열.
                  가장 높은 차수의 계수부터 낮은 차수의 계수(상수항) 순으로 입력합니다.
    """
    if not isinstance(coefficients, (list, np.ndarray)):
        raise TypeError("계수는 리스트 또는 넘파이 배열이어야 합니다.")
    if not coefficients:
        raise ValueError("계수 리스트는 비어 있을 수 없습니다.")

    # numpy.roots는 가장 높은 차수의 계수가 0이 아니어야 함
    if coefficients[0] == 0 and len(coefficients) > 1:
        print("경고: 최고차항의 계수가 0이므로 실제 차수는 더 낮습니다.")
        # 최고차항이 0인 경우 해당 계수를 제거하고 다시 호출 (재귀적)
        return solve_polynomial(coefficients[1:])
    
    # numpy.roots를 사용하여 근 계산
    roots = np.roots(coefficients)
    return roots

# --- 11차 방정식 예시 ---
# 11차 방정식: 2x^11 - 5x^10 + 3x^9 - x^8 + 4x^7 - 2x^6 + x^5 - 3x^4 + 2x^3 - x^2 + 5x - 1 = 0
# 계수를 높은 차수부터 낮은 차수(상수항) 순으로 나열합니다.
# x^11, x^10, x^9, x^8, x^7, x^6, x^5, x^4, x^3, x^2, x^1, x^0
equation_coefficients = [2, -5, 3, -1, 4, -2, 1, -3, 2, -1, 5, -1]

print(f"입력된 11차 방정식의 계수: {equation_coefficients}")

# 함수 호출하여 근 찾기
solutions = solve_polynomial(equation_coefficients)

print("\n--- 방정식의 해 ---")
if solutions.size > 0:
    for i, sol in enumerate(solutions):
        # 복소수 해는 실수부와 허수부로 구분하여 출력
        if np.isreal(sol): # 실근인지 확인
            print(f"해 {i+1}: {sol.real:.6f} (실근)")
        else:
            print(f"해 {i+1}: {sol:.6f} (복소근)")
else:
    print("해를 찾을 수 없습니다 (이론적으로 11차 방정식은 최소한 하나의 실근을 가집니다).")

# 다른 예시 (간단한 2차 방정식: x^2 - 3x + 2 = 0)
print("\n--- 2차 방정식 예시 (x^2 - 3x + 2 = 0) ---")
coefficients_quadratic = [1, -3, 2]
solutions_quadratic = solve_polynomial(coefficients_quadratic)
for i, sol in enumerate(solutions_quadratic):
    if np.isreal(sol):
        print(f"해 {i+1}: {sol.real:.6f} (실근)")
    else:
        print(f"해 {i+1}: {sol:.6f} (복소근)")
